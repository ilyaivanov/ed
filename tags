!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!DosBatch	l,label	/labels/
!_TAG_KIND_DESCRIPTION!DosBatch	v,variable	/variables/
!_TAG_KIND_DESCRIPTION!Vim	C,constant	/constant definitions/
!_TAG_KIND_DESCRIPTION!Vim	a,augroup	/autocommand groups/
!_TAG_KIND_DESCRIPTION!Vim	c,command	/user-defined commands/
!_TAG_KIND_DESCRIPTION!Vim	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!Vim	k,class	/vim9script classes/
!_TAG_KIND_DESCRIPTION!Vim	m,map	/maps/
!_TAG_KIND_DESCRIPTION!Vim	n,filename	/vimball filename/
!_TAG_KIND_DESCRIPTION!Vim	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!DosBatch	0.0	/current.age/
!_TAG_PARSER_VERSION!Vim	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/holy/ed/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/6e6c9a2/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
<C-p>	misc/init.vim	/^nnoremap <C-p> :Files<CR>$/;"	m
<CR>	misc/init.vim	/^nnoremap <CR> i<CR><Esc>$/;"	m
<leader>f	misc/init.vim	/^nnoremap <leader>f :silent update \\| :silent !clang-format --style="{AllowShortFunctionsOnASing/;"	m
<leader>n	misc/init.vim	/^nnoremap <leader>n :noh<CR>$/;"	m
<leader>pf	misc/init.vim	/^nnoremap <leader>pf :GFiles<CR>$/;"	m
<leader>pv	misc/init.vim	/^nnoremap <leader>pv :Vex<CR>$/;"	m
<leader>r	misc/init.vim	/^nnoremap <leader>r :silent update \\| !misc\\\\build.bat<CR>$/;"	m
<leader>sw	misc/init.vim	/^nnoremap <leader>sw :execute 's\/' . expand('<cword>') . '\/'<Left>$/;"	m
<leader>vv	misc/init.vim	/^nnoremap <leader>vv <C-v>$/;"	m
<leader>w	misc/init.vim	/^nnoremap <leader>w :w<CR>\\$/;"	m
AlphaBlendColors	font.c	/^inline u32 AlphaBlendColors(u32 from, u32 to, f32 factor){$/;"	f	typeref:typename:u32
AlphaBlendGreyscale	font.c	/^inline u32 AlphaBlendGreyscale(u32 destination, u8 source, u32 color) {$/;"	f	typeref:typename:u32
AppendCharIntoCommand	main.c	/^void AppendCharIntoCommand(char ch) {$/;"	f	typeref:typename:void
Arena	font.c	/^typedef struct Arena {$/;"	s	file:
Arena	font.c	/^} Arena;$/;"	t	typeref:struct:Arena	file:
ArenaClear	font.c	/^void ArenaClear(Arena *arena) { arena->bytesAllocated = 0; }$/;"	f	typeref:typename:void
ArenaPush	font.c	/^u8 *ArenaPush(Arena *arena, i32 size) {$/;"	f	typeref:typename:u8 *
ArrayLength	win32.c	/^#define ArrayLength(/;"	d	file:
Assert	win32.c	/^#define Assert(/;"	d	file:
Buffer	vim.c	/^typedef struct Buffer {$/;"	s	file:
Buffer	vim.c	/^} Buffer;$/;"	t	typeref:struct:Buffer	file:
Clamp	math.c	/^float Clamp(float val, float min, float max) {$/;"	f	typeref:typename:float
Clampi32	math.c	/^i32 Clampi32(i32 val, i32 min, i32 max) {$/;"	f	typeref:typename:i32
ClearCommand	main.c	/^void ClearCommand() {$/;"	f	typeref:typename:void
CopyMonochromeTextureRectTo	font.c	/^inline void CopyMonochromeTextureRectTo(const MyBitmap *canvas,$/;"	f	typeref:typename:void
CopyRectTo	font.c	/^inline void CopyRectTo(MyBitmap *sourceT, MonochromeTexture *destination) {$/;"	f	typeref:typename:void
CreateArena	font.c	/^inline Arena CreateArena(i32 size) {$/;"	f	typeref:typename:Arena
CursorPos	main.c	/^typedef struct CursorPos {$/;"	s	file:
CursorPos	main.c	/^} CursorPos;$/;"	t	typeref:struct:CursorPos	file:
Draw	main.c	/^void Draw() {$/;"	f	typeref:typename:void
DrawFooter	main.c	/^void DrawFooter() {$/;"	f	typeref:typename:void
DrawScrollBar	main.c	/^void DrawScrollBar() {$/;"	f	typeref:typename:void
EllapsedMs	main.c	/^inline i64 EllapsedMs(i64 start) {$/;"	f	typeref:typename:i64
Fail	win32.c	/^#define Fail(/;"	d	file:
FindLineEnd	string.c	/^i32 FindLineEnd(i32 pos) {$/;"	f	typeref:typename:i32
FindLineStart	string.c	/^i32 FindLineStart(i32 pos) {$/;"	f	typeref:typename:i32
FontData	font.c	/^typedef struct FontData {$/;"	s	file:
FontData	font.c	/^} FontData;$/;"	t	typeref:struct:FontData	file:
GetCursorPosition	main.c	/^CursorPos GetCursorPosition() {$/;"	f	typeref:typename:CursorPos
GetMyFileSize	win32.c	/^i64 GetMyFileSize(char *path) {$/;"	f	typeref:typename:i64
GetPageHeight	main.c	/^i32 GetPageHeight() {$/;"	f	typeref:typename:i32
GetPerfCounter	win32.c	/^inline i64 GetPerfCounter()$/;"	f	typeref:typename:i64
GetPerfFrequency	win32.c	/^inline i64 GetPerfFrequency()$/;"	f	typeref:typename:i64
InitAnimations	anim.c	/^void InitAnimations() {$/;"	f	typeref:typename:void
InitBitmapInfo	font.c	/^void InitBitmapInfo(BITMAPINFO *bitmapInfo, u32 width, u32 height) {$/;"	f	typeref:typename:void
InitFont	font.c	/^void InitFont(FontData *fontData, char *name, i32 fontSize, Arena *arena) {$/;"	f	typeref:typename:void
Insert	main.c	/^typedef enum Mode { Normal, Insert } Mode;$/;"	e	enum:Mode	file:
InsertCharAtCursor	string.c	/^void InsertCharAtCursor(char ch) {$/;"	f	typeref:typename:void
IsKeyPressed	main.c	/^inline BOOL IsKeyPressed(u32 code) {$/;"	f	typeref:typename:BOOL
IsWhitespace	vim.c	/^u32 IsWhitespace(char ch) {$/;"	f	typeref:typename:u32
JumpWordWithPunctuationBackward	vim.c	/^i32 JumpWordWithPunctuationBackward(StringBuffer *file, i32 currentPos) {$/;"	f	typeref:typename:i32
JumpWordWithPunctuationForward	vim.c	/^i32 JumpWordWithPunctuationForward(StringBuffer *file, i32 currentPos) {$/;"	f	typeref:typename:i32
MAX_CHAR_CODE	font.c	/^#define MAX_CHAR_CODE /;"	d	file:
MaxI32	math.c	/^inline i32 MaxI32(i32 v1, i32 v2) {$/;"	f	typeref:typename:i32
MinI32	math.c	/^inline i32 MinI32(i32 v1, i32 v2) {$/;"	f	typeref:typename:i32
Mode	main.c	/^typedef enum Mode { Normal, Insert } Mode;$/;"	g	file:
Mode	main.c	/^typedef enum Mode { Normal, Insert } Mode;$/;"	t	typeref:enum:Mode	file:
MonochromeTexture	font.c	/^typedef struct MonochromeTexture {$/;"	s	file:
MonochromeTexture	font.c	/^} MonochromeTexture;$/;"	t	typeref:struct:MonochromeTexture	file:
MoveBytesLeft	string.c	/^inline void MoveBytesLeft(char *ptr, int length) {$/;"	f	typeref:typename:void
MoveDown	main.c	/^void MoveDown() {$/;"	f	typeref:typename:void
MoveLeft	main.c	/^void MoveLeft() {$/;"	f	typeref:typename:void
MoveRight	main.c	/^void MoveRight() {$/;"	f	typeref:typename:void
MoveUp	main.c	/^void MoveUp() {$/;"	f	typeref:typename:void
MyBitmap	win32.c	/^typedef struct MyBitmap {$/;"	s	file:
MyBitmap	win32.c	/^} MyBitmap;$/;"	t	typeref:struct:MyBitmap	file:
Normal	main.c	/^typedef enum Mode { Normal, Insert } Mode;$/;"	e	enum:Mode	file:
OnEvent	main.c	/^LRESULT OnEvent(HWND window, UINT message, WPARAM wParam, LPARAM lParam) {$/;"	f	typeref:typename:LRESULT
OpenWindow	win32.c	/^HWND OpenWindow(WNDPROC OnEvent, u32 bgColor, char *title) {$/;"	f	typeref:typename:HWND
PaintRect	main.c	/^void PaintRect(i32 x, i32 y, i32 width, i32 height, u32 color) {$/;"	f	typeref:typename:void
PaintRectAlpha	main.c	/^void PaintRectAlpha(i32 x, i32 y, i32 width, i32 height, u32 color, f32 a) {$/;"	f	typeref:typename:void
PlaceLineEnd	string.c	/^inline void PlaceLineEnd() {$/;"	f	typeref:typename:void
PreventWindowsDPIScaling	win32.c	/^static void PreventWindowsDPIScaling() {$/;"	f	typeref:typename:void	file:
ReadFileInto	win32.c	/^void ReadFileInto(char *path, u32 fileSize, char *buffer) {$/;"	f	typeref:typename:void
ReadFileIntoDoubledSizedBuffer	string.c	/^StringBuffer ReadFileIntoDoubledSizedBuffer(char *path) {$/;"	f	typeref:typename:StringBuffer
Rect	win32.c	/^} Rect;$/;"	t	typeref:struct:__anonc8e2dee90108	file:
RemoveCharAt	string.c	/^void RemoveCharAt(i32 at) {$/;"	f	typeref:typename:void
RemoveCurrentChar	main.c	/^void RemoveCurrentChar() {$/;"	f	typeref:typename:void
RoundI32	math.c	/^inline i32 RoundI32(f32 v)$/;"	f	typeref:typename:i32
RoundU8	win32.c	/^inline u8 RoundU8(f32 v) { return (u8)(v + 0.5); }$/;"	f	typeref:typename:u8
SaveFile	main.c	/^void SaveFile() {$/;"	f	typeref:typename:void
SetCursorPosition	main.c	/^void SetCursorPosition(i32 v) {$/;"	f	typeref:typename:void
SetFullscreen	win32.c	/^void SetFullscreen(HWND window, i32 isFullscreen)$/;"	f	typeref:typename:void
Spring	anim.c	/^typedef struct Spring {$/;"	s	file:
Spring	anim.c	/^} Spring;$/;"	t	typeref:struct:Spring	file:
StringBuffer	string.c	/^typedef struct StringBuffer {$/;"	s	file:
StringBuffer	string.c	/^} StringBuffer;$/;"	t	typeref:struct:StringBuffer	file:
UpdateSpring	anim.c	/^void UpdateSpring(Spring *spring, float deltaSec) {$/;"	f	typeref:typename:void
VirtualAllocateMemory	win32.c	/^inline void *VirtualAllocateMemory(size_t size) {$/;"	f	typeref:typename:void *
VirtualFreeMemory	win32.c	/^inline void VirtualFreeMemory(void *ptr) { VirtualFree(ptr, 0, MEM_RELEASE); };$/;"	f	typeref:typename:void
WIN32_LEAN_AND_MEAN	win32.c	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WinMain	main.c	/^int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd) {$/;"	f	typeref:typename:int
WriteMyFile	win32.c	/^void WriteMyFile(char *path, char *content, int size)$/;"	f	typeref:typename:void
__anonc8e2dee90108	win32.c	/^typedef struct {$/;"	s	file:
appTimeMs	main.c	/^f32 appTimeMs = 0;$/;"	v	typeref:typename:f32
ayucolor	misc/init.vim	/^let ayucolor="dark"   " for dark version of theme$/;"	v
bitmapInfo	main.c	/^BITMAPINFO bitmapInfo;$/;"	v	typeref:typename:BITMAPINFO
bytesAllocated	font.c	/^  i32 bytesAllocated;$/;"	m	struct:Arena	typeref:typename:i32	file:
bytesPerPixel	win32.c	/^  i32 bytesPerPixel;$/;"	m	struct:MyBitmap	typeref:typename:i32	file:
canvas	main.c	/^MyBitmap canvas;$/;"	v	typeref:typename:MyBitmap
capacity	string.c	/^  i32 capacity;$/;"	m	struct:StringBuffer	typeref:typename:i32	file:
charHeight	font.c	/^  u32 charHeight;$/;"	m	struct:FontData	typeref:typename:u32	file:
charWidth	font.c	/^  u32 charWidth;$/;"	m	struct:FontData	typeref:typename:u32	file:
colorsBg	main.c	/^u32 colorsBg = 0x050505;$/;"	v	typeref:typename:u32
colorsCursorInsert	main.c	/^u32 colorsCursorInsert = 0x008800;$/;"	v	typeref:typename:u32
colorsCursorLineInsert	main.c	/^u32 colorsCursorLineInsert = 0x151010;$/;"	v	typeref:typename:u32
colorsCursorLineNormal	main.c	/^u32 colorsCursorLineNormal = 0x101510;$/;"	v	typeref:typename:u32
colorsCursorNormal	main.c	/^u32 colorsCursorNormal = 0x880000;$/;"	v	typeref:typename:u32
colorsFont	main.c	/^u32 colorsFont = 0xE6E1CF;$/;"	v	typeref:typename:u32
colorsScrollbar	main.c	/^u32 colorsScrollbar = 0x222222;$/;"	v	typeref:typename:u32
content	string.c	/^  char *content;$/;"	m	struct:StringBuffer	typeref:typename:char *	file:
current	anim.c	/^  float current;$/;"	m	struct:Spring	typeref:typename:float	file:
currentCommand	main.c	/^char currentCommand[512];$/;"	v	typeref:typename:char[512]
currentCommandLen	main.c	/^i32 currentCommandLen;$/;"	v	typeref:typename:i32
currentFile	string.c	/^StringBuffer *currentFile;$/;"	v	typeref:typename:StringBuffer *
cursor	vim.c	/^  i32 cursor;$/;"	m	struct:Buffer	typeref:typename:i32	file:
cursorCol	vim.c	/^  i32 cursorCol;$/;"	m	struct:Buffer	typeref:typename:i32	file:
cursorLine	vim.c	/^  i32 cursorLine;$/;"	m	struct:Buffer	typeref:typename:i32	file:
cursorPos	string.c	/^i32 cursorPos = 0;$/;"	v	typeref:typename:i32
damping	anim.c	/^float damping;$/;"	v	typeref:typename:float
dc	main.c	/^HDC dc;$/;"	v	typeref:typename:HDC
f32	win32.c	/^typedef float f32;$/;"	t	typeref:typename:float	file:
f64	win32.c	/^typedef double f64;$/;"	t	typeref:typename:double	file:
file	main.c	/^StringBuffer file;$/;"	v	typeref:typename:StringBuffer
file	vim.c	/^  StringBuffer file;$/;"	m	struct:Buffer	typeref:typename:StringBuffer	file:
filePath	main.c	/^char *filePath = "..\\\\vim.c";$/;"	v	typeref:typename:char *
font	main.c	/^FontData font;$/;"	v	typeref:typename:FontData
fontName	main.c	/^char *fontName = "Consolas";$/;"	v	typeref:typename:char *
fontSize	main.c	/^i32 fontSize = 14;$/;"	v	typeref:typename:i32
footerPadding	main.c	/^i32 footerPadding = 2;$/;"	v	typeref:typename:i32
footerRect	main.c	/^Rect footerRect = {0};$/;"	v	typeref:typename:Rect
global	main.c	/^  i32 global;$/;"	m	struct:CursorPos	typeref:typename:i32	file:
height	font.c	/^  i32 height;$/;"	m	struct:MonochromeTexture	typeref:typename:i32	file:
height	win32.c	/^  i32 height;$/;"	m	struct:MyBitmap	typeref:typename:i32	file:
height	win32.c	/^  i32 height;$/;"	m	struct:__anonc8e2dee90108	typeref:typename:i32	file:
i32	win32.c	/^typedef int32_t i32;$/;"	t	typeref:typename:int32_t	file:
i64	win32.c	/^typedef int64_t i64;$/;"	t	typeref:typename:int64_t	file:
isFullscreen	main.c	/^int isFullscreen = 0;$/;"	v	typeref:typename:int
isMonospaced	font.c	/^  u32 isMonospaced;$/;"	m	struct:FontData	typeref:typename:u32	file:
isRunning	main.c	/^int isRunning = 1;$/;"	v	typeref:typename:int
isSaved	main.c	/^i32 isSaved = 1;$/;"	v	typeref:typename:i32
lerp	win32.c	/^inline f32 lerp(f32 from, f32 to, f32 factor) {$/;"	f	typeref:typename:f32
line	main.c	/^  i32 line;$/;"	m	struct:CursorPos	typeref:typename:i32	file:
lineHeight	main.c	/^f32 lineHeight = 1.1;$/;"	v	typeref:typename:f32
lineOffset	main.c	/^  i32 lineOffset;$/;"	m	struct:CursorPos	typeref:typename:i32	file:
mapleader	misc/init.vim	/^let mapleader = " "$/;"	v
mode	main.c	/^Mode mode = Normal;$/;"	v	typeref:typename:Mode
offset	main.c	/^Spring offset;$/;"	v	typeref:typename:Spring
pixels	font.c	/^  u8 *pixels;$/;"	m	struct:MonochromeTexture	typeref:typename:u8 *	file:
pixels	win32.c	/^  u32 *pixels;$/;"	m	struct:MyBitmap	typeref:typename:u32 *	file:
prevWindowDimensions	win32.c	/^WINDOWPLACEMENT prevWindowDimensions = {sizeof(prevWindowDimensions)};$/;"	v	typeref:typename:WINDOWPLACEMENT
screen	main.c	/^Rect screen = {0};$/;"	v	typeref:typename:Rect
set_process_dpi_aware	win32.c	/^typedef BOOL WINAPI set_process_dpi_aware(void);$/;"	t	typeref:typename:BOOL WINAPI ()(void)	file:
set_process_dpi_awareness_context	win32.c	/^typedef BOOL WINAPI set_process_dpi_awareness_context(DPI_AWARENESS_CONTEXT);$/;"	t	typeref:typename:BOOL WINAPI ()(DPI_AWARENESS_CONTEXT)	file:
size	font.c	/^  i32 size;$/;"	m	struct:Arena	typeref:typename:i32	file:
size	string.c	/^  i32 size;$/;"	m	struct:StringBuffer	typeref:typename:i32	file:
start	font.c	/^  u8 *start;$/;"	m	struct:Arena	typeref:typename:u8 *	file:
stiffness	anim.c	/^float stiffness;$/;"	v	typeref:typename:float
target	anim.c	/^  float target;$/;"	m	struct:Spring	typeref:typename:float	file:
textMetric	font.c	/^  TEXTMETRIC textMetric;$/;"	m	struct:FontData	typeref:typename:TEXTMETRIC	file:
textRect	main.c	/^Rect textRect = {0};$/;"	v	typeref:typename:Rect
textures	font.c	/^  MonochromeTexture textures[MAX_CHAR_CODE];$/;"	m	struct:FontData	typeref:typename:MonochromeTexture[]	file:
u32	win32.c	/^typedef uint32_t u32;$/;"	t	typeref:typename:uint32_t	file:
u64	win32.c	/^typedef uint64_t u64;$/;"	t	typeref:typename:uint64_t	file:
u8	win32.c	/^typedef uint8_t u8;$/;"	t	typeref:typename:uint8_t	file:
velocity	anim.c	/^  float velocity;$/;"	m	struct:Spring	typeref:typename:float	file:
visibleCommandLen	main.c	/^i32 visibleCommandLen;$/;"	v	typeref:typename:i32
width	font.c	/^  i32 width;$/;"	m	struct:MonochromeTexture	typeref:typename:i32	file:
width	win32.c	/^  i32 width;$/;"	m	struct:MyBitmap	typeref:typename:i32	file:
width	win32.c	/^  i32 width;$/;"	m	struct:__anonc8e2dee90108	typeref:typename:i32	file:
x	win32.c	/^  i32 x;$/;"	m	struct:__anonc8e2dee90108	typeref:typename:i32	file:
y	win32.c	/^  i32 y;$/;"	m	struct:__anonc8e2dee90108	typeref:typename:i32	file:
